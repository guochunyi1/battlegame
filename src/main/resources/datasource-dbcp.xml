<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">

	<!-- 数据库连接池 -->
    <bean id="mysqlDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${ruijie.database.driverClassName}" />
        <property name="url" value="${ruijie.database.url}" />
        <property name="username" value="${ruijie.database.username}" />
        <property name="password" value="${ruijie.database.password}" />
        <property name="connectionProperties"  value="${ruijie.database.connectionProperties}"/>

        <!-- Connection Pooling Info -->
        <!-- 连接池启动时创建的初始化连接数量 -->
        <property name="initialSize" value="${ruijie.database.initialSize}" />
        <!-- 连接池中可同时连接的最大的连接数（默认值为8，调整为20，高峰单机器在20并发左右，自己根据应用场景定） -->
        <property name="maxActive" value="${ruijie.database.maxActive}" />
        <!-- 连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制（默认为8个，maxIdle不能设置
太小，因为假如在高负载的情况下，连接的打开时间比关闭的时间快，会引起连接池中idle的个数 上升超过maxIdle，而造成频繁的连接销毁>和创建，类似于jvm参数中的Xmx设置) -->
        <property name="maxIdle" value="${ruijie.database.maxIdle}" />
        <!-- 连接池中最小的空闲的连接数，低于这个数量会被创建新的连接（默认为0，调整为5，该参数越接近maxIdle，性能越>好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大，因为在机器很空闲的时候，也会创建低于minidle个数的连接，类似于jvm>参数中的Xmn设置） -->
        <property name="minIdle" value="${ruijie.database.minIdle}" />
        <!--最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无>限等待（默认为无限，调整为60000ms，避免因线程池不够用，而导致请求被无限制挂起） -->
        <property name="maxWait" value="${ruijie.database.maxWait}" />
        <!-- 开启池的prepared（默认是false，未调整，经过测试，开启后的性能没有关闭的好。） -->
        <property name="poolPreparedStatements" value="${ruijie.database.poolPreparedStatements}" />
        <property name="defaultAutoCommit" value="${ruijie.database.defaultAutoCommit}" />
        <!-- 是否在自动回收超时连接的时候打印连接的超时错误 -->
        <property name="logAbandoned" value="${ruijie.database.logAbandoned}" />
        <!--超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收（默认为false，调整为true) -->
        <property name="removeAbandoned" value="${ruijie.database.removeAbandoned}" />
        <!--超过时间限制，回收没有用(废弃)的连接（默认为 300秒，调整为180） -->
        <property name="removeAbandonedTimeout" value="${ruijie.database.removeAbandonedTimeout}" />

        <!-- Validate配置代码 -->
        <!-- GenericObjectPool中针对pool管理，起了一个Evict的TimerTask定时线程进行控制(可通过设置参数timeBetweenEvictionRunsMillis>0),定时对线程池中的链接进行validateObject校验，对无效的链接进行关闭后，会调用ensureMinIdle，适当建立链接保证最小的minIdle连接数。 -->
        <property name="testWhileIdle" value="${ruijie.database.testWhileIdle}" />
        <!-- 对拿到的connection进行validateObject校验 -->
        <property name="testOnBorrow" value="${ruijie.database.testOnBorrow}" />
        <property name="testOnReturn" value="${ruijie.database.testOnReturn}" />
        <!-- 代表检查的sql -->
        <property name="validationQuery" value="${ruijie.database.validationQuery}" />
        <!-- 代表在执行检查时，通过statement设置，statement.setQueryTimeout(validationQueryTimeout) -->
        <property name="validationQueryTimeout" value="${ruijie.database.validationQueryTimeout}" />
        <!-- 设置的Evict线程的时间，单位ms，大于0才会开启evict检查线程 -->
        <property name="timeBetweenEvictionRunsMillis" value="${ruijie.database.timeBetweenEvictionRunsMillis}" />
        <property name="minEvictableIdleTimeMillis" value="${ruijie.database.minEvictableIdleTimeMillis}" />
        <!-- 代表每次检查链接的数量，建议设置和maxActive一样大，这样每次可以有效检查所有的链接. -->
        <property name="numTestsPerEvictionRun" value="${ruijie.database.numTestsPerEvictionRun}" />
    </bean>
</beans>
